/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RemittanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "collectFees"
      | "collectedFees"
      | "conversionFee"
      | "countryStablecoins"
      | "emergencyWithdraw"
      | "exchangeRates"
      | "getCollectedFees"
      | "getExchangeRate"
      | "getLiquidityBalance"
      | "getPendingWithdrawal"
      | "getStablecoinForCountry"
      | "liquidityPools"
      | "owner"
      | "paused"
      | "pendingWithdrawals"
      | "removeLiquidity"
      | "sendRemittance"
      | "setConversionFee"
      | "setExchangeRate"
      | "setPaused"
      | "setStablecoinForCountry"
      | "transferOwnership"
      | "withdrawRemittance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConversionFeeUpdated"
      | "ExchangeRateUpdated"
      | "FeesCollected"
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "RemittanceWithdrawn"
      | "StablecoinAssigned"
      | "TransferCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countryStablecoins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRates",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdrawal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStablecoinForCountry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPools",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRemittance",
    values: [string, string, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeRate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setStablecoinForCountry",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRemittance",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countryStablecoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStablecoinForCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRemittance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStablecoinForCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRemittance",
    data: BytesLike
  ): Result;
}

export namespace ConversionFeeUpdatedEvent {
  export type InputTuple = [
    oldFee: BigNumberish,
    newFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [oldFee: bigint, newFee: bigint, timestamp: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeRateUpdatedEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    toToken: AddressLike,
    rate: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    fromToken: string,
    toToken: string,
    rate: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    fromToken: string;
    toToken: string;
    rate: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [token: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [token: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [token: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemittanceWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StablecoinAssignedEvent {
  export type InputTuple = [
    countryCode: string,
    stablecoin: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    countryCode: string,
    stablecoin: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    countryCode: string;
    stablecoin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferCompletedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    fromCountry: string,
    toCountry: string,
    sentAmount: BigNumberish,
    convertedAmount: BigNumberish,
    fee: BigNumberish,
    referenceId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    fromCountry: string,
    toCountry: string,
    sentAmount: bigint,
    convertedAmount: bigint,
    fee: bigint,
    referenceId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    fromCountry: string;
    toCountry: string;
    sentAmount: bigint;
    convertedAmount: bigint;
    fee: bigint;
    referenceId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Remittance extends BaseContract {
  connect(runner?: ContractRunner | null): Remittance;
  waitForDeployment(): Promise<this>;

  interface: RemittanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectFees: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  collectedFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  conversionFee: TypedContractMethod<[], [bigint], "view">;

  countryStablecoins: TypedContractMethod<[arg0: string], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  exchangeRates: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getCollectedFees: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getExchangeRate: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike],
    [bigint],
    "view"
  >;

  getLiquidityBalance: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getPendingWithdrawal: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getStablecoinForCountry: TypedContractMethod<
    [countryCode: string],
    [string],
    "view"
  >;

  liquidityPools: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendRemittance: TypedContractMethod<
    [
      fromCountry: string,
      toCountry: string,
      to: AddressLike,
      amount: BigNumberish,
      referenceId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setConversionFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExchangeRate: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setStablecoinForCountry: TypedContractMethod<
    [countryCode: string, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawRemittance: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectedFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "conversionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "countryStablecoins"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchangeRates"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollectedFees"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingWithdrawal"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStablecoinForCountry"
  ): TypedContractMethod<[countryCode: string], [string], "view">;
  getFunction(
    nameOrSignature: "liquidityPools"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRemittance"
  ): TypedContractMethod<
    [
      fromCountry: string,
      toCountry: string,
      to: AddressLike,
      amount: BigNumberish,
      referenceId: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConversionFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExchangeRate"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStablecoinForCountry"
  ): TypedContractMethod<
    [countryCode: string, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRemittance"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConversionFeeUpdated"
  ): TypedContractEvent<
    ConversionFeeUpdatedEvent.InputTuple,
    ConversionFeeUpdatedEvent.OutputTuple,
    ConversionFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExchangeRateUpdated"
  ): TypedContractEvent<
    ExchangeRateUpdatedEvent.InputTuple,
    ExchangeRateUpdatedEvent.OutputTuple,
    ExchangeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RemittanceWithdrawn"
  ): TypedContractEvent<
    RemittanceWithdrawnEvent.InputTuple,
    RemittanceWithdrawnEvent.OutputTuple,
    RemittanceWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "StablecoinAssigned"
  ): TypedContractEvent<
    StablecoinAssignedEvent.InputTuple,
    StablecoinAssignedEvent.OutputTuple,
    StablecoinAssignedEvent.OutputObject
  >;
  getEvent(
    key: "TransferCompleted"
  ): TypedContractEvent<
    TransferCompletedEvent.InputTuple,
    TransferCompletedEvent.OutputTuple,
    TransferCompletedEvent.OutputObject
  >;

  filters: {
    "ConversionFeeUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ConversionFeeUpdatedEvent.InputTuple,
      ConversionFeeUpdatedEvent.OutputTuple,
      ConversionFeeUpdatedEvent.OutputObject
    >;
    ConversionFeeUpdated: TypedContractEvent<
      ConversionFeeUpdatedEvent.InputTuple,
      ConversionFeeUpdatedEvent.OutputTuple,
      ConversionFeeUpdatedEvent.OutputObject
    >;

    "ExchangeRateUpdated(address,address,uint256,uint256)": TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;
    ExchangeRateUpdated: TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;

    "FeesCollected(address,uint256,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "LiquidityAdded(address,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(address,uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "RemittanceWithdrawn(address,address,uint256,uint256)": TypedContractEvent<
      RemittanceWithdrawnEvent.InputTuple,
      RemittanceWithdrawnEvent.OutputTuple,
      RemittanceWithdrawnEvent.OutputObject
    >;
    RemittanceWithdrawn: TypedContractEvent<
      RemittanceWithdrawnEvent.InputTuple,
      RemittanceWithdrawnEvent.OutputTuple,
      RemittanceWithdrawnEvent.OutputObject
    >;

    "StablecoinAssigned(string,address,uint256)": TypedContractEvent<
      StablecoinAssignedEvent.InputTuple,
      StablecoinAssignedEvent.OutputTuple,
      StablecoinAssignedEvent.OutputObject
    >;
    StablecoinAssigned: TypedContractEvent<
      StablecoinAssignedEvent.InputTuple,
      StablecoinAssignedEvent.OutputTuple,
      StablecoinAssignedEvent.OutputObject
    >;

    "TransferCompleted(address,address,string,string,uint256,uint256,uint256,bytes32,uint256)": TypedContractEvent<
      TransferCompletedEvent.InputTuple,
      TransferCompletedEvent.OutputTuple,
      TransferCompletedEvent.OutputObject
    >;
    TransferCompleted: TypedContractEvent<
      TransferCompletedEvent.InputTuple,
      TransferCompletedEvent.OutputTuple,
      TransferCompletedEvent.OutputObject
    >;
  };
}
